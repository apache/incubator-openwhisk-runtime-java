#!/usr/bin/env python
"""Java Action Builder
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""

from __future__ import print_function
from os.path import abspath, exists, dirname
import os, sys, codecs, subprocess, shutil

def copy(src, dst):
    with codecs.open(src, 'r', 'utf-8') as s:
        body = s.read()
        with codecs.open(dst, 'w', 'utf-8') as d:
            d.write(body)

def javac(sources, classpath, target_dir):
    cmd = [ "javac",
            "-cp", ":".join(classpath),
            "-d", target_dir
    ]+sources
    print(cmd)
    p = subprocess.Popen(cmd,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    (o, e) = p.communicate()
    if isinstance(o, bytes) and not isinstance(o, str):
        o = o.decode('utf-8')
    if isinstance(e, bytes) and not isinstance(e, str):
        e = e.decode('utf-8')
    ok = True
    if o:
        ok = False
        sys.stdout.write(o)
        sys.stdout.flush()
    if e:
        ok = False
        sys.stderr.write(e)
        sys.stderr.flush()
    return ok

def build(source_dir, classpath, target_dir, main):
    sources = []

    # copy exec to source 
    src = "%s/exec" % source_dir
    mainFile = main.split(".")[-1].split("#")[0]
 
    # copy exec to <main>.java is not there
    if os.path.isfile(src):
        main_java = "%s/%s.java" % (source_dir, mainFile)
        copy(src,main_java)
        sources.append(main_java)
        
    return javac(sources, classpath, target_dir)
  
def write_exec(target_dir, classpath, main):
    launcher = "%s/exec" % target_dir
    if main == "main":
        main = ""
    cmd = """#!/bin/bash
cd %s
/opt/java/openjdk/bin/java -cp %s Launcher %s""" %(
        target_dir, ":".join(classpath), main
    )
    with codecs.open(launcher, 'w', 'utf-8') as d:
        d.write(cmd)
    os.chmod(launcher, 0o755)

def assemble(argv):

    main = argv[1]
    source_dir = os.path.abspath(argv[2])
    target_dir = os.path.abspath(argv[3])
    classpath = ["/usr/java/lib/launcher.jar", "/usr/java/lib/gson-2.8.5.jar"]    
    
    ok = True

    # handle the case of an exec uploaded
    exec_jar = "%s/exec.jar" % source_dir  
    if exists(exec_jar):
        shutil.rmtree(target_dir)
        shutil.move(source_dir, target_dir)
        classpath.append("%s/exec.jar" % target_dir)
    else:
      # build sources
      ok = build(source_dir, classpath, target_dir, main)
      print("build: ", ok)
      classpath.append(target_dir)
 
    # write the launcher is it is there
    if ok: write_exec(target_dir, classpath, main)
    
    sys.stdout.flush()
    sys.stderr.flush()
    
if __name__ == '__main__':
    if len(sys.argv) < 4:
        sys.stdout.write("usage: <main-class> <source-dir> <target-dir>\n")
        sys.exit(1)
    assemble(sys.argv)
